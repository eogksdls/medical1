# 함수 선언 def 이름()
# 함수 호출: 이름()
# 함수 선언 매개변수 개수는 꼬옥 맞춰야함 :def 이름(매개변수) -> 이름(매개변수)
# 리턴의 결과값을 받지 않아도 되지만, 리턴의 개수는 맞춰야함.
# 함수 내의 변수는 지역변수여서, 함수가 종료되면 사라진다.
# 함수내의 변경된 변수값을 전역변수에 반영하고 싶으면 return으로 돌려줘야함
# 함수내 global이라고 하면, 전역변수에 선언되어 있는 변수 주소를 가져와서 return을 사용하지 않아도 된다
# 매개 변수로 리스트를 사용할 경우, return할 필요가 없음


def func1():
    # global a
    a = 100  # 지역변수: 함수 내에서만 사용
    print("func1 a =",a)
    # 지역변수 값을 전역변수에 적용시키는 방법
    return a

def func2():
    print("func2 b =",a+10)   # 함수 내에 a가 변수지정이 안되어 있다면, 전역변수에서 찾아온다.

a = 20  # 전역변수

a = func1()  
# a=100, # func1()에서 return을 선언함으로써 전역변수가 됨
func2()
print("결과 값 : ",a)
# 또는 fucn1() 함수에서 'global a'를 선언해주면, return 을 선언해주지 않아도 전역변수로 작용한다.
# 하지만, global은 변수값을 할당하는데 오류 발생 시 근원지를 찾기 어렵기 때문에 되도록 사용하는 것을 지양한다.

# def cal(v1,sum): # 지역변수: 한정된 지역에서만 사용
#     sum = sum + 500  # 지역변수
#     v1 = 200   # 지역변수
#     return v1, sum   # 지역변수의 값을 사용하고 싶으면 return을 선언해주면 됨

# sum = 0  # 전역변수: 프로그램 전체에서 사용
# v1 = 100 # 전역변수
# cal(v1,sum)
# print(v1) # 100
# print(sum) # 0